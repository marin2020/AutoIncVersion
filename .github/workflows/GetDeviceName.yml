# Build C++ project
# and create NuGet package

name: Build and Publish GetDeviceName

on:
  push:
    branches: [ "main" ]
    paths:
      - 'GetDeviceName/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'GetDeviceName/**'
  # schedule:
  #   - cron: "0 0 1 */2 *"
  workflow_dispatch:
  
permissions:
  contents: read
  packages: write
  
jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
    - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      
    #- name: List files in the repository
    #  run: |
    #      dir ${{ github.workspace }} -Recurse
    #      Get-ChildItem ${{ github.workspace }} -Recurse
    #      ls ${{ github.workspace }}\GetDeviceName
    
    - name: Sets unique version
      run: |
          dir ${{ github.workspace }} -Recurse
          Get-ChildItem ${{ github.workspace }} -Recurse
          ChangeRcVersion -dir ${{ github.workspace }}\GetDeviceName -name GetDeviceName
          
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

    - name: Build GetDeviceName
      run: |
        msbuild.exe GetDeviceName\GetDeviceName.vcxproj /nologo /nr:false /p:DeleteExistingFiles=True /p:platform="Any CPU" /p:configuration="Debug" /p:OutputPath="bin\Debug"

    - run: echo "üçè This job's status is ${{ job.status }}."
        
    # - name: Generate Nuget Package 
    #   run: nuget pack GetDeviceName\GetDeviceName.nuspec -OutputDirectory .

    # - name: Push to GitHub package registry
    #   run: dotnet nuget push *.GetDeviceName.*.nupkg --source "OrgGitHubFeed" --api-key ${{ secrets.GITHUB_TOKEN }}
